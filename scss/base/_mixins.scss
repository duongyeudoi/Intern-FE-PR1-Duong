@mixin flex($justify, $align, $direction: row, $wrap: nowrap, $gap: 0) {
  display: flex;
  justify-content: $justify;
  align-items: $align;
  @if ($direction != 'row') {
    flex-direction: $direction;
  }
  @if ($wrap != 'nowrap') {
    flex-wrap: $wrap;
  }
  @if ($gap != 0) {
    gap: $gap;
  }
}

@mixin abs-center($direction: both) {
  position: absolute;
  @if ($direction == 'x') {
    left: 50%;
    transform: translateX(-50%);
  }
  @if ($direction == 'y') {
    top: 50%;
    transform: translateY(-50%);
  } @else {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}

$breakpoints: (
  'mobile-and-down': (
    max-width: 767.98px,
  ),
  'tablet-and-up': (
    min-width: 768px,
  ),
  'tablet-and-down': (
    max-width: 1023.98px,
  ),
  'desktop': (
    min-width: 1024px,
  ),
) !default;

@mixin respond-to($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}
@mixin gridTemplate($column, $row: '', $gap: 0) {
  display: grid;
  grid-template-columns: repeat($column, minmax(0, 1fr));
  gap: $gap;
  @if ($row != '') {
    grid-template-rows: repeat($row, minmax(0, 1fr));
  }
}

@mixin hoverTransition($color, $backgroundColor: '') {
  transition: all 0.2s linear;
  &:hover {
    color: $color;
    @if $backgroundColor != '' {
      background-color: $backgroundColor;
    }

    cursor: pointer;
  }
}
@mixin gridSnap($selector) {
  .#{$selector} {
    display: grid;
    justify-content: flex-start;
    grid-auto-columns: 30rem;
    grid-auto-flow: column;
    grid-gap: 1.5rem;
    overflow: auto;
    overflow-y: hidden;
    scroll-snap-type: x mandatory;
    scroll-snap-stop: always;
    -ms-touch-action: manipulation;
    touch-action: manipulation;
    -webkit-overflow-scrolling: touch;
    scroll-padding: 2rem;
    grid-template-columns: unset;
    grid-template-rows: none;
  }
  .#{$selector}::-webkit-scrollbar {
    display: none;
    width: 0;
  }
  .#{$selector} > * {
    scroll-snap-align: start;
  }
}
@mixin ratioImage($ratio: '1/1', $width: '100%') {
  width: $width;

  object-fit: cover;
  aspect-ratio: $ratio;
}

@mixin customFont(
  $size: '1.3rem',
  $fontFamily,
  $color: $primary,
  $weight: 500
) {
  font-size: $size;
  font-family: $fontFamily;
  font-weight: $weight;
  color: $color;
}
